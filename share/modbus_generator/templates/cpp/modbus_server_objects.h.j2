{# Jinja Template #}
/*
 * Copyright {{ timestamp.year }} ElectroOptical Innovations, LLC
 * {{ fname }}
 * Autogenerated file: {{ timestamp.date() }}
C++
  - Use a namespace with namespaces.
  - Generate enums for each entry
  - Generate list of offsets indexed by enum value, iterate over these for the start and end
  - Generate list of names indexed by enum
  - Offset to enum switch statement
  - Data is stored in namespace
  - Switch statement for read and write data to byte arrays
 */

#pragma once
#include "ModbusEntry.h"
#include <cstdint>
#include <algorithm>
#include <array>
#include <cstdint>
#include <string>

const inline std::array<ModbusEntry, {{ entries | length }}> modbus_entries {
  {% for entry in entries -%}ModbusEntry{
    "{{entry['name']}}",
    "{{entry['data type']}}",
    {{entry['address']}},
    {{entry['length']}},
    {{entry['register count']}},
    "{{entry['type']}}"
  },
  {% endfor %}
};
