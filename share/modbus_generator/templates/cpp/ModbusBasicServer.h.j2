{# Jinja Template #}
/*
 * Copyright {{ timestamp.year }} ElectroOptical Innovations, LLC
 * {{ fname }}
 * Autogenerated file: {{ timestamp.date() }}
C++
  - Use a namespace with namespaces.
  - Generate enums for each entry
  - Generate list of offsets indexed by enum value, iterate over these for the start and end
  - Generate list of names indexed by enum
  - Offset to enum switch statement
  - Data is stored in namespace
  - Switch statement for read and write data to byte arrays
 */

#pragma once

//  #include <DataStores/DataStores.h>
#include <cstdint>
#include <Utilities/TypeConversion.h>
#include <ArrayView/ArrayView.h>
#include <algorithm>
#include <array>
#include <cstdint>

namespace ModbusBasic_{{ name }} {
enum class EntryIdentifier {
  {%- for entry in entries %}
  {{ entry["name"] }},
  {%- endfor %}
  unknown
};


template<typename T>
inline constexpr EntryIdentifier get_enum_of_offset(const size_t offset, const T& offsets) {
  for(size_t i=0; i<offsets.size(); i++) {
    if (offsets[i] == offset) {
      return static_cast<EntryIdentifier>(i);
    }
  }
  return EntryIdentifier::unknown;
}

struct {{ name }} {
  {%- for entry in entries %}
    {%- if(entry.length > 1) %}
    {{ entry["ctype"] }} {{ entry["name"] }}[{{ entry.length }}]{};
    {%- else %}
    {{ entry["ctype"] }} {{ entry["name"] }}{};
    {%- endif %}
  {%- endfor %}
};


class Wrapper {
 public:
  static const constexpr std::size_t entries_ = {{ entries | length }};

  static const constexpr std::array<size_t, {{ entries | length }}> offsets_ {
    {%- for entry in entries %}
    {{ entry.address }},
    {%- endfor %}
  };

  static const constexpr std::array<size_t, {{ entries | length }}> end_points_ {
    {%- for entry in entries %}
    {{ entry.address }} + {{ entry["register count"] }} - 1,
    {%- endfor %}
  };

  static const constexpr std::array<const char*, {{ entries | length }}> names_ {
    {%- for entry in entries %}
    "{{ entry["name"] }}",
    {%- endfor %}
  };

 private:
  {{ name }}* data_bank_{};

 public:
  explicit Wrapper({{name}}* data_bank) : data_bank_{data_bank} {}
  static const constexpr std::size_t size() {
    return sizeof({{ name }});
  }

  void SetField(const std::size_t index, const uint8_t* data, const std::size_t size) {
    const EntryIdentifier identifier = static_cast<EntryIdentifier>(index);
    switch (identifier) {
      case(EntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      {% for entry in entries -%}
      case(EntryIdentifier::{{ entry["name"] }}) : {
      {%- if entry.length > 1 %}
        Utilities::ArrayFromBytes(data, data_bank_->{{ entry["name"] }}, size, sizeof(data_bank_->{{ entry["name"] }}[0]));
      {% else %}
        const size_t max_write_bytes = std::min(size, sizeof(data_bank_->{{ entry["name"] }}));
        Utilities::ConvertToType<{{ entry["ctype"] }}>(data, &data_bank_->{{ entry["name"] }}, max_write_bytes);
      {%- endif %}
        break;
      }
      {% endfor %}
      default:
        break;
    }
  }

  void GetField(const std::size_t index, uint8_t* data, const std::size_t size) const {
    const EntryIdentifier identifier = static_cast<EntryIdentifier>(index);
    switch (identifier) {
      case(EntryIdentifier::unknown): {
        // Ignore this case, should be scrubed
        break;
      }
      {%- for entry in entries %}
      case(EntryIdentifier::{{ entry["name"] }}) : {
      {%- if entry["length"] > 1 %}
        Utilities::ArrayToBytes(data_bank_->{{ entry["name"] }}, data, size, sizeof(data_bank_->{{ entry["name"] }}));
      {%- else %}
        const size_t max_write_bytes = std::min(size, sizeof(data_bank_->{{ entry["name"] }}));
        Utilities::ConvertToBytes(data_bank_->{{ entry["name"] }}, data, max_write_bytes);
      {%- endif %}
        break;
      }

      {%- endfor %}
      default:
        break;
    }
  }

  {%- for entry in entries %}
  {%- if entry.length > 1 %}
  ArrayView<const {{ entry["ctype"] }}> get_{{ entry["name"] }}(void) const {
    return ArrayView<const {{ entry["ctype"] }}>{ {{ entry.length }}, data_bank_->{{ entry["name"] }} };
  }
  void set_{{ entry["name"] }}(const {{ entry["ctype"] }} *const value, std::size_t length) {
    for (std::size_t i = 0; i < length; i++) {
      data_bank_->{{ entry["name"] }}[i] = value[i];
    }
  }
  {%- else %}
  {{ entry["ctype"] }} get_{{ entry["name"] }}(void) const {
    return data_bank_->{{ entry["name"] }};
  }
  void set_{{ entry["name"] }}({{ entry["ctype"] }} value) {
    data_bank_->{{ entry["name"] }} = value;
  }
  {%- endif %}
  {%- endfor %}
  };  // class Wrapper
}  //  ModbusBasic_{{ name }}
