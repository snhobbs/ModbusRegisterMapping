#!/usr/bin/env python3
import errno
import click
import copy
from jinja2 import Template, Environment, FileSystemLoader
import modbus_generator
import sys, os

@click.command()
@click.option('--file', '-f', type=str, required=True, help='Schema file')
@click.option('--pymodbus', '-p', is_flag=True, help='Pymodbus server')
@click.option('--libmodbus', '-l', is_flag=True, help='libmodbus server')
@click.option('--libmodbus-includes', multiple=True, type=str, help='Additional includes for libmodbus')
@click.option('--flatbuffers', '-m', is_flag=True, help='ModbusBasic server')
@click.option('--namespace', '-n', type=str, default="", help='namespace used, use periods to seperate')
@click.option('--windldr', '-w', is_flag=True, help='Windldr server configuration')
@click.option('--windldr-offset', type=int, default=0, help='Offset for windldr')
@click.option('--md', is_flag=True, help='Markdown Documentation')
@click.option('--test_master', '-t', is_flag=True, help='Generate corresponding test files for the languages chosen')
def main(**kwargs):
    schema_string = ""
    namespaces = kwargs["namespace"].strip(".").split(".")
    try:
        with open(kwargs["file"], 'r') as f:
            schema_string = f.read()
    except (FileNotFoundError):
        print("Schema file %s not found"%kwargs["file"])
        return errno.ENOENT

    schema = modbus_generator.Schema.read(schema_string)

    if kwargs["pymodbus"]:
        modbus_generator.generate_pymodbus_server(schema)
    if kwargs["libmodbus"]:
        modbus_generator.generate_libmodbus_server(schema)
    if kwargs["flatbuffers"]:
        modbus_generator.generate_flatbuffers_schema(schema, kwargs["namespace"])
    if kwargs["windldr"]:
        modbus_generator.generate_windldr_config(schema, offset=kwargs["windldr_offset"])
    if kwargs["md"]:
        modbus_generator.generate_markdown(schema)

    if kwargs["test_master"]:
        if kwargs["pymodbus"]:
            modbus_generator.generate_pymodbus_master(schema)
        if kwargs["libmodbus"]:
            modbus_generator.generate_libmodbus_master(schema)

if __name__ == "__main__":
    main()
